@import "variables";

:root {
  --color__hue--base: 218deg 24% 24%;
  --color__hue--highlight: 158deg 32% 38%;
  --color__hue--contrast: 218deg 100% 100%;
  --color__hue--contrast--extra: 218deg 48% 12%;
  --color__base: hsl(var(--color__hue--base));
  --color__base--ish: hsl(var(--color__hue--base) / 0.75);
  --color__base--mid: hsl(var(--color__hue--base) / 0.625);
  --color__base--semi: hsl(var(--color__hue--base) / 0.25);
  --color__base--light: hsl(var(--color__hue--base) / 0.125);
  --color__base--ghost: hsl(var(--color__hue--base) / 0.0625);
  --color__highlight: hsl(var(--color__hue--highlight));
  --color__highlight--ish: hsl(var(--color__hue--highlight) / 0.75);
  --color__highlight--mid: hsl(var(--color__hue--highlight) / 0.625);
  --color__highlight--semi: hsl(var(--color__hue--highlight) / 0.25);
  --color__highlight--light: hsl(var(--color__hue--highlight) / 0.125);
  --color__highlight--ghost: hsl(var(--color__hue--highlight) / 0.0625);
  --color__contrast: hsl(var(--color__hue--contrast));
  --color__contrast--extra: hsl(var(--color__hue--contrast--extra));
  --outline__offset: 0;
  --outline__size: var(--size__xs);
  --outline__style: solid;
  --outline__color: var(--color__highlight--semi);
  @each $key, $value in $sizes {
    --size__#{$key}: #{$value};
  }
  --shadow__color: var(--color__hue--base);
  --shadow__value: 0.375;
  --shadow: 0 var(--size__xxs) var(--size__xs) calc(var(--size__xxs) * -1)
      hsl(var(--shadow__color) / calc(var(--shadow__value) / 2)),
    0 var(--size__m) var(--size__l) calc(var(--size__m) * -1)
      hsl(var(--shadow__color) / var(--shadow__value));
  --shadow__all: 0 0 var(--size__xxs)
      hsl(var(--shadow__color) / calc(var(--shadow__value) / 2)),
    0 0 var(--size__l) hsl(var(--shadow__color) / var(--shadow__value));
  --type__family--primary: sans-serif;
  --type__family--secondary: serif;
  --type__family--tertiary: monospace;
  @each $key, $value in $type__lineheights {
    --type__lineheight--#{$key}: #{$value};
  }
  @each $key, $value in $type__sizes {
    --type__size--#{$key}: #{$value};
  }
  --type__size--target: 2vw + 1rem;
  @each $key, $value in $widths {
    --width__#{$key}: #{$value};
  }
  accent-color: var(--color__highlight);
}

// Pulled this from https://eladsc.com
:where(:not(strong, b, em, i, iframe, canvas, img, svg, video, button, input, progress, select, textarea, summary):not(svg
      *)) {
  all: unset;
  display: revert;
}

// Focus management
:is(a, button, input, select, textarea, summary) {
  &:focus-visible {
    outline: var(--outline__size) var(--outline__style) var(--outline__color);
    outline-offset: var(--outline__offset, var(--outline__size));
  }
  &:focus:not(:focus-visible) {
    outline: none;
  }
}

*,
*:before,
*:after {
  box-sizing: border-box;
}

canvas,
img,
picture,
svg {
  height: auto;
  max-width: 100%;
  vertical-align: middle;
}

html {
  background-color: var(--color__contrast);
  color: var(--color__base);
  font-family: var(--type__family--primary);
  min-height: 100%;
  min-height: -webkit-fill-available;
  text-rendering: optimizeLegibility;
  text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: bold;
}

p,
h1,
h2,
h3,
h4,
h5,
h6 {
  overflow-wrap: break-word;
}

h1 {
  font-size: var(--type__size--xxl);
  line-height: var(--type__lineheight--xxl);
}

h2 {
  font-size: var(--type__size--xl);
  line-height: var(--type__lineheight--xl);
}

h3 {
  font-size: var(--type__size--l);
  line-height: var(--type__lineheight--xl);
}

h4 {
  font-size: var(--type__size--m);
  line-height: var(--type__lineheight--l);
}

h5,
th {
  font-size: var(--type__size--xs);
  line-height: var(--type__lineheight--s);
  letter-spacing: var(--size__xxs);
  text-transform: uppercase;
}

h6 {
  font-size: var(--type__size--xxs);
  line-height: var(--type__lineheight--xs);
  letter-spacing: var(--size__xxs);
  text-transform: uppercase;
}

p,
li,
dl,
td {
  font-size: var(--type__size--m);
  line-height: var(--type__lineheight--l);
}

ol:not([class]),
ol.styled,
ul:not([class]),
ul.styled {
  padding-left: var(--type__size--m);
  ol,
  ul {
    margin-top: var(--size__m);
    padding-left: var(--type__size--m);
  }
  li {
    list-style-position: outside;
    &::marker {
      color: var(--color__highlight);
    }
    + * {
      margin-top: var(--size__m);
    }
  }
}

ol {
  ol {
    li {
      list-style-type: lower-alpha;
      li {
        list-style-type: lower-roman;
      }
    }
  }
}

hr:not([class]),
hr.styled {
  background-color: var(--color__highlight--semi);
  border-radius: calc(var(--size__xs) / 2);
  height: var(--size__xs);
  width: var(--size__xxxl);
}

a,
button {
  cursor: pointer;
}

p a {
  text-decoration-color: var(--color__highlight--semi);
  text-decoration-thickness: calc(var(--size__xs) / 2);
  text-decoration-line: underline;
  text-underline-offset: var(--size__xs);
  transition: all 0.375s ease-in;
  transition-property: background-color, color;
  &:focus,
  &:hover {
    color: var(--color__highlight);
  }
  &:focus-visible {
    background-color: var(--color__highlight--ghost);
  }
}

blockquote:not([class]),
blockquote.styled {
  --color__bg: var(--color__highlight--light);
  --color__border: var(--color__highlight--semi);
  background-color: var(--color__bg);
  border: var(--size__xxs) solid var(--color__border);
  box-shadow: inset var(--size__xs) 0 0 0 var(--color__border);
  padding: var(--size__m);
  > * + * {
    margin-top: var(--size__m);
  }
}

code,
pre {
  --bg: var(--color__contrast--extra);
  --color: white;
}

code {
  font-family: var(--type__family--tertiary);
  font-size: var(--type__size--s);
  * & {
    background-color: var(--bg);
    border-radius: var(--size__xs);
    box-decoration-break: clone;
    color: var(--color);
    padding: var(--size__xs) var(--size__s);
    word-wrap: break-word;
  }
  pre > & {
    -webkit-overflow-scrolling: touch;
    background: none;
    display: block;
    max-width: 100%;
    overflow-x: scroll;
    padding: var(--size__m);
    white-space: pre;
  }
}

pre {
  background-color: var(--bg);
  border-radius: var(--size__s);
  color: var(--color);
  .comment,
  .prolog,
  .doctype,
  .cdata,
  .namespace,
  .operator,
  .function {
    opacity: 0.75;
  }
  .parameter,
  .property,
  .boolean,
  .number {
    color: var(--color__primary);
  }

  .selector,
  .attr-name,
  .string,
  .char,
  .builtin,
  .inserted,
  .atrule,
  .attr-value,
  .class-name,
  .regex,
  .important {
    color: var(--color__secondary);
  }
  .tag,
  .constant,
  .symbol,
  .deleted,
  .keyword {
    color: var(--color__tertiary);
  }
  .important,
  .bold {
    font-weight: bold;
  }
  .italic {
    font-style: italic;
  }
}

dl {
  dt {
    font-weight: bold;
  }
}

table:not([class]),
table.styled {
  --evenRow: var(--color__contrast);
  --oddRow: var(--color__base--light);
  --padding: var(--size__s);
  border-collapse: collapse;
  font-variant-numeric: tabular-nums;
  th {
    text-align: left;
  }
  th,
  td {
    padding: var(--padding);
  }
  tbody {
    tr td {
      border-right: var(--size__xxs) solid var(--color__base--light);
      &:last-child {
        border-right: none;
      }
    }
    tr:nth-of-type(odd) {
      td {
        background-color: var(--oddRow);
      }
    }
    tr:nth-of-type(even) {
      td {
        background-color: var(--evenRow);
      }
    }
  }
}

input,
button,
textarea,
select {
  font: inherit;
}

details:not([class]),
details.styled {
  --radius: var(--size__s);
  border: var(--size__xxs) solid var(--color__base--light);
  border-radius: var(--radius);
  summary {
    border-radius: var(--radius);
    font-size: var(--type__size--m);
    line-height: var(--type__lineheight--l);
    list-style: revert;
    padding-block: var(--size__s);
    padding-inline: var(--size__m);
    &::marker {
      color: var(--color__base--mid);
    }
    + * {
      background-color: var(--color__base--ghost);
      border-bottom-left-radius: var(--radius);
      border-bottom-right-radius: var(--radius);
      border-top: var(--size__xxs) solid var(--color__base--light);
      padding-block: var(--size__s);
      padding-inline: var(--size__m);
    }
  }
  &[open] summary {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
  }
}
